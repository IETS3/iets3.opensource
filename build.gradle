// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    if (project.hasProperty("teamcity")) {
        ext.ciBuild = true
    } else {
        ext.ciBuild = false
    }
}


def forceLocal = project.hasProperty("forceLocalDependencies")


// Dependency versions
ext.mpsVersion = '2017.2.2'


// Project version
if (project.hasProperty('iets3OpenSourceVersion')) {
    version = project.iets3OpenSourceVersion
} else {
    if (ciBuild) {
        version = GitBasedVersioning.getVersion('0', '1')
        println "##teamcity[buildNumber '${version}']"
    } else {
        println "Local build detected, version will be SNAPSHOT"
        version = "1.0-SNAPSHOT"
    }
}

if (!project.hasProperty("mbeddrVersion")) {
    if (forceLocal) {
        println "Local SNAPSHOT version forced"
        ext.mbeddrVersion = '1.0-SNAPSHOT'
    }
    else {
        //default version
        ext.mbeddrVersion = '1.0.+'
    }
}


ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

ext.dependencyRepositories = [
    'https://projects.itemis.de/nexus/content/repositories/mbeddr',
    'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
]

ext.artifactsDir = new File(rootDir, 'artifacts')

apply plugin: 'maven-publish'
apply plugin: 'base'

task wrapper(type: Wrapper) {
    gradleVersion '3.1'
    distributionType 'all'
}

configurations {
    mps
    mpsArtifacts
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    mpsArtifacts "com.mbeddr:allScripts:$mbeddrVersion"
    mpsArtifacts "com.mbeddr:platform:$mbeddrVersion"
}

repositories {
        mavenLocal()
        for (repoUrl in project.dependencyRepositories) {
            maven {
                url repoUrl
                if (project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.nexusUsername
                        password project.nexusPassword
                    }
                }
            }
        }
}

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

task resolveMpsArtifacts(type: Copy) {
    from {
        configurations.mpsArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

ant.properties['mps.home'] = resolveMps.destinationDir
ant.properties['iets3.github.opensource.home'] = rootDir
ant.properties['build.dir'] = rootDir
ant.properties['artifacts.root'] = resolveMpsArtifacts.destinationDir
ant.properties['version'] = version
ant.importBuild('code/languages/build.xml') { target -> 'ant-' + target }

tasks['ant-check-mps-home'].dependsOn resolveMps
tasks['ant-clean-and-build'].dependsOn resolveMps, resolveMpsArtifacts

task packageAllScripts(type: Zip, dependsOn: 'ant-clean-and-build') {
    baseName 'org.iets3.opensource.allScripts'
    from artifactsDir
    include 'org.iets3.opensource.allScripts.build/**'
}

task packageOpenSource(type: Zip, dependsOn: 'ant-clean-and-build') {
    baseName 'org.iets3.opensource'
    from artifactsDir
    include 'org.iets3.opensource/**'
}

task packageTests(type: Zip, dependsOn: 'ant-clean-and-build') {
    baseName 'org.iets3.opensource.tests'
    from new File(artifactsDir, 'org.iets3.opensource.tests')
}

assemble.dependsOn packageAllScripts, packageOpenSource, packageTests
 
publishing {
    repositories {
        maven {
            url project.publishingRepository
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    publications {
        allScripts(MavenPublication) {
            groupId 'org.iets3.opensource'
            artifactId 'allScripts'
            artifact packageAllScripts
        }
        openSource(MavenPublication) {
            groupId 'org.iets3'
            artifactId 'opensource'
            artifact packageOpenSource
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
        tests(MavenPublication) {
            groupId 'org.iets3.opensource'
            artifactId 'tests'
            artifact packageTests
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
            }
        }
    }
}

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
}
dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
}
ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.junitAnt.asPath)
ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.junitAnt.asPath)

check.dependsOn 'ant-build-and-run-tests'

defaultTasks 'ant-clean-and-build'

