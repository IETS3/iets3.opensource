import de.itemis.mps.gradle.*

import java.time.LocalDateTime


//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.175.cc60dc8'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id 'co.riiid.gradle' version '0.4.2'
}

// Detect jdk location, required to start ant with tools.jar on classpath otherwise javac and tests will fail
def jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    def expected = JavaVersion.VERSION_11
    if (JavaVersion.current() != expected) {
        throw new GradleException("This build script requires Java 11 but you are currently using ${JavaVersion.current()}.\nWhat you can do:\n"
                + "  * Use project property java11_home to point to the Java 11 JDK.\n"
                + "  * Use environment variable JB_JAVA11_HOME to point to the Java 11 JDK\n"
                + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

logger.info 'Using JDK at {}', jdk_home

ext.jdk_home = jdk_home

// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    ext.ciBuild = project.hasProperty("teamcity")
}


def forceLocal = project.hasProperty("forceLocalDependencies")

def major = "2019"
def minor = "3"

// Dependency versions
ext.mpsVersion = '2019.3.2'

def mbeddrVersion = "2019.3+"

// if building a against a special branch from mbeddr is required add the name here
// the name is enough no trailing "." is required, also the plain name from git can
// be used here. No need to convert "/" the script will take care of that.
def mbeddrBranch = ""


if (mbeddrBranch != null && !mbeddrBranch.trim().isEmpty()) {
    ext.mbeddrVersionSelector = "${mbeddrBranch.replace("/", "-")}.${mbeddrVersion}"
} else {
    ext.mbeddrVersionSelector = mbeddrVersion
}


// Project version
if (project.hasProperty('iets3OpenSourceVersion')) {
    version = project.iets3OpenSourceVersion
} else {
    if (ciBuild) {
        String branch = GitBasedVersioning.gitBranch

        def buildNumber = System.env.BUILD_NUMBER.toInteger()
        if (branch.startsWith("maintenance") || branch.startsWith("mps")) {
            version = "$major.$minor.$buildNumber.${GitBasedVersioning.gitShortCommitHash}"
        } else {
            version = GitBasedVersioning.getVersionWithCount(major, minor, buildNumber)
        }
        println "##teamcity[buildNumber '${version}']"
    } else {
        version = "$major.$minor-SNAPSHOT"
        println "Local build detected, version will be $version"
    }
}

if (!project.hasProperty("mbeddrVersion")) {
    if (forceLocal) {
        ext.mbeddrVersionSelector = '1.0-SNAPSHOT'
        logger.log(LogLevel.WARN, "Local mbeddr version $ext.mbeddrVersionSelector forced")
    }
} else {
    logger.log(LogLevel.WARN, "mbeddr version externally overwritten to $ext.mbeddrVersion")
    ext.mbeddrVersionSelector = ext.mbeddrVersion
}


ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

ext.dependencyRepositories = [
    'https://projects.itemis.de/nexus/content/repositories/mbeddr',
    'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
]

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.incrementalBuild = !project.hasProperty("disableIncrementalBuild")


wrapper {
    gradleVersion '5.5.1'
    distributionType Wrapper.DistributionType.ALL
}

configurations {
    mps
    mpsArtifacts
    junitAnt
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    mpsArtifacts "com.mbeddr:platform:$mbeddrVersionSelector"
    junitAnt 'org.apache.ant:ant-junit:1.10.6'
}

repositories {
    mavenLocal()
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    mavenCentral()
}

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

task resolveMpsArtifacts(type: Copy) {
    from {
        configurations.mpsArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

// Default arguments for ant scripts
def defaultScriptArgs = [
        'mps.home'                          : resolveMps.destinationDir,
        'iets3.github.opensource.home'      : rootDir,
        'build.dir'                         : rootDir,
        'mps.generator.skipUnmodifiedModels': incrementalBuild,
        'version'                           : version
]
def defaultScriptClasspath = project.configurations.junitAnt.fileCollection { true } +
        project.files("$ext.jdk_home/lib/tools.jar")

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = defaultScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = new File(jdk_home, 'bin/java')

task buildAllScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts]) {
    script "$buildDir/iets3.opensource.allScripts/build-allScripts.xml"
    doLast {
        // patch heap size setting for tests execution
        def antTestScriptFile = rootProject.file('build/iets3.opensource.tests/build.xml')
        antTestScriptFile.text = antTestScriptFile.text.replace("-Xmx1024m", "-Xmx2048m")
    }
}

task buildLanguages(type: BuildLanguages, dependsOn: buildAllScripts) {
    script "$buildDir/iets3.opensource/build.xml"
}

task buildAndRunTests(type: TestLanguages, dependsOn: buildLanguages) {
    script "$buildDir/iets3.opensource.tests/build.xml"
    doLast {
        ant.taskdef(name: 'junitreport',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitAnt.asPath)
        ant.junitreport {
            fileset(dir: "$buildDir", includes: '**/TEST*.xml')
            report(format: 'frames', todir: "$buildDir/junitreport")
        }
        ant.echo("JUnit report placed into $buildDir/junitreport/index.html")
    }
}

check.dependsOn buildAndRunTests

task packageAllScripts(type: Zip, dependsOn: buildAllScripts) {
    archiveBaseName = 'org.iets3.opensource.allScripts'
    from artifactsDir
    include 'org.iets3.opensource.allScripts.build/**'
}

task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    archiveBaseName = 'org.iets3.opensource'
    from artifactsDir
    include 'org.iets3.opensource/**'
}

task packageTests(type: Zip, dependsOn: buildAndRunTests) {
    archiveBaseName = 'org.iets3.opensource.tests'
    from artifactsDir
    include 'org.iets3.opensource.tests/**'
}

assemble.dependsOn packageAllScripts, packageLanguages, packageTests

publishing {
    repositories {
        maven {
            url project.publishingRepository
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    publications {
        allScripts(MavenPublication) {
            groupId 'org.iets3.opensource'
            artifactId 'allScripts'
            artifact packageAllScripts
        }
        openSource(MavenPublication) {
            groupId 'org.iets3'
            artifactId 'opensource'
            artifact packageLanguages
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mpsArtifacts.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
        tests(MavenPublication) {
            groupId 'org.iets3.opensource'
            artifactId 'tests'
            artifact packageTests
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
            }
        }
    }
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    dependsOn resolveMpsArtifacts
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('code/languages/org.iets3.opensource/.mps/libraries.xml')
}

task setup {
    dependsOn generateLibrariesXml
    dependsOn resolveMpsArtifacts
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

defaultTasks 'buildLanguages'

def releaseNotes = """Automated Nighly build from ${LocalDateTime.now() as String}."""

github {
    owner = 'IETS3'
    repo = 'iets3.opensource'
    token = rootProject.findProperty('github.token') ?: 'empty'
    tagName = 'nightly-release-' + version
    targetCommitish = GitBasedVersioning.getGitCommitHash()
    name = 'Nighly Build ' + version
    body = releaseNotes
    prerelease = true
    assets = packageLanguages.outputs.files
}

githubRelease.dependsOn packageLanguages
