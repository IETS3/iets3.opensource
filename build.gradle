import de.itemis.mps.gradle.*

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.FormatStyle


//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.175.cc60dc8'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id 'co.riiid.gradle' version '0.4.2'
}

// Detect jdk location, required to start ant with tools.jar on classpath otherwise javac and tests will fail
def jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    def expected = JavaVersion.VERSION_11
    if (JavaVersion.current() != expected) {
        throw new GradleException("This build script requires Java 11 but you are currently using ${JavaVersion.current()}.\nWhat you can do:\n"
                + "  * Use project property java11_home to point to the Java 11 JDK.\n"
                + "  * Use environment variable JB_JAVA11_HOME to point to the Java 11 JDK\n"
                + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

logger.info 'Using JDK at {}', jdk_home

ext.jdk_home = jdk_home

// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    ext.ciBuild = project.hasProperty("teamcity")
}


def forceLocal = project.hasProperty("forceLocalDependencies")

def major = "2021"
def minor = "1"

// Dependency versions
ext.mpsVersion = '2021.1.4'

def mbeddrVersion = "2021.1+"

// if building a against a special branch from mbeddr is required add the name here
// the name is enough no trailing "." is required, also the plain name from git can
// be used here. No need to convert "/" the script will take care of that.
def mbeddrBranch = ""
def currentBranch = ""


if (mbeddrBranch != null && !mbeddrBranch.trim().isEmpty()) {
    ext.mbeddrVersionSelector = "${mbeddrBranch.replace("/", "-")}.${mbeddrVersion}"
} else {
    ext.mbeddrVersionSelector = mbeddrVersion
}


// Project version
if (project.hasProperty('iets3OpenSourceVersion')) {
    version = project.iets3OpenSourceVersion
} else {
    if (ciBuild) {
        currentBranch = GitBasedVersioning.gitBranch

        def buildNumber = System.env.BUILD_NUMBER.toInteger()
        if (currentBranch.startsWith("maintenance") || currentBranch.startsWith("mps")) {
            version = "$major.$minor.$buildNumber.${GitBasedVersioning.gitShortCommitHash}"
        } else {
            version = GitBasedVersioning.getVersionWithCount(major, minor, buildNumber)
        }
        println "##teamcity[buildNumber '${version}']"
    } else {
        version = "$major.$minor-SNAPSHOT"
        println "Local build detected, version will be $version"
    }
}

if (!project.hasProperty("mbeddrVersion")) {
    if (forceLocal) {
        ext.mbeddrVersionSelector = '1.0-SNAPSHOT'
        logger.log(LogLevel.WARN, "Local mbeddr version $ext.mbeddrVersionSelector forced")
    }
} else {
    logger.log(LogLevel.WARN, "mbeddr version externally overwritten to $ext.mbeddrVersion")
    ext.mbeddrVersionSelector = ext.mbeddrVersion
}


ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

ext.dependencyRepositories = [
    'https://projects.itemis.de/nexus/content/repositories/mbeddr',
    'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
]

// 'artifacts' is used in the generated ant scripts as build output directory
ext.artifactsDir = new File(buildDir, 'artifacts')
ext.incrementalBuild = !project.hasProperty("disableIncrementalBuild")


wrapper {
    gradleVersion '5.5.1'
    distributionType Wrapper.DistributionType.ALL
}

configurations {
    mps
    languageLibs
    junitAnt
    pcollections // Synced to org.iets3.core.expr.base.collections.stubs/lib
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    languageLibs "com.mbeddr:platform:$mbeddrVersionSelector"
    junitAnt 'org.apache.ant:ant-junit:1.10.6'
    pcollections 'org.pcollections:pcollections:3.1.4'
}

repositories {
    mavenLocal()
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    mavenCentral()
}

task resolveMps(type: Sync) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

task resolveLanguageLibs(type: Sync) {
    from {
        configurations.languageLibs.resolve().collect { zipTree(it) }
    }
    into "$buildDir/dependencies"
}

task resolvePcollections(type: Sync) {
    from configurations.pcollections
    into file('code/languages/org.iets3.opensource/solutions/org.iets3.core.expr.base.collections.stubs/lib')

    // Strip version numbers from file names
    rename { filename ->
        def ra = configurations.pcollections.resolvedConfiguration.resolvedArtifacts.find { ResolvedArtifact ra -> ra.file.name == filename }
        String finalName
        if (ra.classifier != null) {
            finalName = "${ra.name}-${ra.classifier}.${ra.extension}"
        } else {
            finalName = "${ra.name}.${ra.extension}"
        }
        return finalName
    }
}

task resolveDependencies(dependsOn: [resolveLanguageLibs, resolvePcollections])

// Default arguments for ant scripts
def defaultScriptArgs = [
        'mps.home'                          : resolveMps.destinationDir,
        'iets3.github.opensource.home'      : rootDir,
        'build.dir'                         : buildDir,
        'mps.generator.skipUnmodifiedModels': incrementalBuild,
        'version'                           : version
]
if (gradle.startParameter.logLevel.toString() != "LIFECYCLE") {
    defaultScriptArgs.put('mps.ant.log', gradle.startParameter.logLevel.toString().toLowerCase())
}

def defaultScriptClasspath = project.configurations.junitAnt.fileCollection { true } +
        project.files("$ext.jdk_home/lib/tools.jar")

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = defaultScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = new File(jdk_home, 'bin/java')

task buildAllScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveDependencies]) {
    script "$buildDir/scripts/build-allScripts.xml"
}

task prebuild(type: BuildLanguages, dependsOn: buildAllScripts) {
    script "$buildDir/scripts/prebuild.xml"
    targets "clean", "generate"
}

task buildLanguages(type: BuildLanguages, dependsOn: prebuild) {
    script "$buildDir/scripts/build-languages.xml"
}

task buildAndRunTests(type: TestLanguages, dependsOn: buildLanguages) {
    script "$buildDir/scripts/build-tests.xml"
    doLast {
        ant.taskdef(name: 'junitreport',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitAnt.asPath)
        ant.junitreport {
            fileset(dir: "$buildDir", includes: '**/TEST*.xml')
            report(format: 'frames', todir: "$buildDir/junitreport")
        }
        ant.echo("JUnit report placed into $buildDir/junitreport/index.html")
    }
}

check.dependsOn buildAndRunTests

task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    archiveBaseName = 'org.iets3.opensource'
    from artifactsDir
    include 'org.iets3.opensource/**'
}

task packageTests(type: Zip, dependsOn: buildAndRunTests) {
    archiveBaseName = 'org.iets3.opensource.tests'
    from artifactsDir
    include 'org.iets3.opensource.tests/**'
}

task buildDistroWithDependencies(type: RunAntScript, dependsOn: buildLanguages) {
    script "$buildDir/scripts/build-distro.xml"
    targets 'clean', 'assemble'
}

task packageDistroWithDependencies(type: Zip, dependsOn: buildDistroWithDependencies) {
    archiveBaseName = 'org.iets3.opensource-with-dependencies'
    from artifactsDir
    include 'org.iets3.opensource.distro/**'
}

assemble.dependsOn packageLanguages, packageTests

static def addDependency(Object pom, Object groupId, Object artifactId, Object version, Object type = null) {
    pom.withXml { XmlProvider prov ->
        Node root = prov.asNode()
        Node deps = root.dependencies[0] ?: root.appendNode("dependencies")
        def dep = deps.appendNode("dependency")
        dep.appendNode("groupId", groupId)
        dep.appendNode("artifactId", artifactId)
        dep.appendNode("version", version)
        if (type != null) {
            dep.appendNode("type", type)
        }
    }
}

static def addDependency(Object pom, Configuration config) {
    config.resolvedConfiguration.firstLevelModuleDependencies.each {
        addDependency(pom, it.moduleGroup, it.moduleName, it.moduleVersion, it.moduleArtifacts[0].type)
    }

}

publishing {
    repositories {
        maven {
            url project.publishingRepository
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
        maven {
                name = "itemisCloud"
                url = version.toString().endsWith("-SNAPSHOT")
                        ? uri("https://artifacts.itemis.cloud/repository/maven-mps-snapshots/")
                        : uri("https://artifacts.itemis.cloud/repository/maven-mps-releases/")
                if (project.hasProperty("artifacts.itemis.cloud.user") && project.hasProperty("artifacts.itemis.cloud.pw")) {
                    credentials {
                        username = project.findProperty("artifacts.itemis.cloud.user")
                        password = project.findProperty("artifacts.itemis.cloud.pw")
                    }
                }
        }
    }
    repositories {
        if(currentBranch == "master" || currentBranch.startsWith("maintenance") || currentBranch.startsWith("mps")) {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/IETS3/iets3.opensource")
                    if(project.hasProperty("gpr.token")) {
                        credentials {
                            username = project.findProperty("gpr.user")
                            password = project.findProperty("gpr.token")
                        }
                    }
                }
            }
        }

    publications {
        openSource(MavenPublication) {
            groupId 'org.iets3'
            artifactId 'opensource'
            artifact packageLanguages

            addDependency(pom, configurations.languageLibs)
        }

        tests(MavenPublication) {
            groupId 'org.iets3.opensource'
            artifactId 'tests'
            artifact packageTests

            addDependency(pom, 'org.iets3', 'opensource', project.version, 'zip')
        }

        def runtimesDir = new File(artifactsDir, 'org.iets3.opensource/org.iets3.core.os/languages/iets3.core.os')

        'org.iets3.core.expr.base.shared.runtime'(MavenPublication) {
            groupId 'org.iets3.core.expr.base.shared'
            artifactId 'shared-runtime'
            artifact(new File(runtimesDir, 'org.iets3.core.expr.base.shared.runtime.jar')) {
                builtBy buildLanguages
            }
            artifact(new File(runtimesDir, 'org.iets3.core.expr.base.shared.runtime-src.jar')) {
                builtBy buildLanguages
                classifier 'sources'
            }
        }

        'org.iets3.core.expr.simpleTypes.runtime'(MavenPublication) {
            // GitHub Packages refuse uppercase artifactId (not sure about groupId) so use lower case here
            groupId 'org.iets3.core.expr.simpletypes'
            artifactId 'simpletypes-runtime'
            artifact(new File(runtimesDir, 'org.iets3.core.expr.simpleTypes.runtime.jar')) {
                builtBy buildLanguages
            }
            artifact(new File(runtimesDir, 'org.iets3.core.expr.simpleTypes.runtime-src.jar')) {
                builtBy buildLanguages
                classifier 'sources'
            }

            addDependency(pom, 'org.iets3.core.expr.base.shared', 'shared-runtime', project.version)
        }

        'org.iets3.core.expr.datetime.runtime'(MavenPublication) {
            groupId 'org.iets3.core.expr.datetime'
            artifactId 'datetime-runtime'
            artifact(new File(runtimesDir, 'org.iets3.core.expr.datetime.runtime.jar')) {
                builtBy buildLanguages
            }
            artifact(new File(runtimesDir, 'org.iets3.core.expr.datetime.runtime-src.jar')) {
                builtBy buildLanguages
                classifier 'sources'
            }

            addDependency(pom, 'org.iets3.core.expr.base.shared', 'shared-runtime', project.version)
        }

        'org.iets3.core.expr.temporal.runtime'(MavenPublication) {
            groupId 'org.iets3.core.expr.temporal'
            artifactId 'temporal-runtime'
            artifact(new File(runtimesDir, 'org.iets3.core.expr.temporal.runtime.jar')) {
                builtBy buildLanguages
            }
            artifact(new File(runtimesDir, 'org.iets3.core.expr.temporal.runtime-src.jar')) {
                builtBy buildLanguages
                classifier 'sources'
            }

            addDependency(pom, 'org.iets3.core.expr.datetime', 'datetime-runtime', project.version)
        }
    }
}


task generateLibrariesXml(type: GenerateLibrariesXml) {
    dependsOn resolveDependencies
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('code/languages/org.iets3.opensource/.mps/libraries.xml')
}

task setup {
    dependsOn generateLibrariesXml
    dependsOn resolveDependencies
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

defaultTasks 'buildLanguages'

def listMergedPRs = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'sh', './listMergedPRs.sh'
        standardOutput = stdout
    }
    stdout.toString()
}

def currentDate = LocalDate.now().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL))
def prCommitsList = "${-> listMergedPRs().readLines().collect { line -> "- $line"}.join("\n")}"
def langLibDeps = project.configurations.languageLibs.resolvedConfiguration.lenientConfiguration.allModuleDependencies
def depsList = langLibDeps.collect {"- `${it.moduleGroup}:${it.moduleName}` : `${it.moduleVersion}`"}.join("\n")
def releaseNotes = """Automated Nighly build from ${currentDate}.

Included pull requests since last Nightly build:
${prCommitsList}

Includes dependencies:
${depsList}
"""

github {
    owner = 'IETS3'
    repo = 'iets3.opensource'
    token = rootProject.findProperty('github.token') ?: 'empty'
    tagName = 'nightly-' + version
    targetCommitish = GitBasedVersioning.getGitCommitHash()
    name = 'Nighly Build ' + version
    prerelease = true
    assets = packageDistroWithDependencies.outputs.files.collect {it.path}
}
githubRelease.doFirst {
    // do late body init to avoid executing listMergedPRs during config phase
    github {
        body = releaseNotes
    }
}

githubRelease.dependsOn packageDistroWithDependencies
